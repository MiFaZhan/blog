# name: Deploy to GitHub Pages
# on:
#   push:
#     branches: [ main ]  # 监听 main 分支的推送
# jobs:
#   build-and-deploy:
#     runs-on: ubuntu-latest  # 在 GitHub 的服务器上运行
#     steps:
#       # 步骤1：下载私有仓库的代码
#       - name: Checkout
#         uses: actions/checkout@v4

#       # 步骤2：安装 Node.js 环境
#       - name: Setup Node
#         uses: actions/setup-node@v4
#         with:
#           node-version: 20  # 需与你的 Hexo 版本匹配

#       # 步骤3：安装 Hexo 依赖
#       - name: Install Dependencies
#         run: npm install

#       # 步骤4：生成静态网页文件（Hexo 编译）
#       - name: Generate Static Files
#         run: npm run build  # 或 hexo generate

#       # 步骤5：推送生成的网页到公开仓库
#       - name: Deploy to Pages
#         uses: peaceiris/actions-gh-pages@v3
#         with:
#           deploy_key: ${{ secrets.DEPLOY_KEY }}  # 使用之前添加的私钥
#           publish_dir: ./public                  # Hexo 生成的文件夹
#           external_repository: MiFaZhan/MiFaZhan.github.io  # 改为你的公开仓库名
#           publish_branch: blog                   # 推送到公开仓库的 main 分支

# name: Deploy
# on:
#   push:
#     branches:
#       - main
# jobs:
#   build:
#     runs-on: ubuntu-latest
#     steps:
#     - name: Checkout
#       uses: actions/checkout@v4

#     - name: Setup Node
#       uses: actions/setup-node@v4
#       with:
#         node-version: 20

#     - name: Install Dependencies
#       run: |
#         npm install
#         npm install hexo-cli -g

#     # 关键步骤：显式执行豆瓣数据生成
#     - name: Generate Douban Data
#       run: npx hexo douban

#     - name: Generate Site
#       run: |
#         hexo clean
#         hexo generate

#     - name: Deploy
#       uses: peaceiris/actions-gh-pages@v3
#       with:
#           deploy_key: ${{ secrets.DEPLOY_KEY }}  # 使用之前添加的私钥
#           publish_dir: ./public                  # Hexo 生成的文件夹
#           external_repository: MiFaZhan/MiFaZhan.github.io  # 改为你的公开仓库名
#           publish_branch: blog                   # 推送到公开仓库的 main 分支

name: Deploy
on:
  push:
    branches: [main]
    # 仅当豆瓣相关配置或内容变更时触发
    paths:
      - '_config.yml'
      - 'source/_data/douban/**'
      - '!source/_data/douban/cache/**'

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      DOUBAN_CACHE_KEY: ${{ github.sha }}-douban

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # 需要完整提交历史记录

    - name: Detect Config Changes
      id: detect
      run: |
        # 检查最近3次提交中是否有豆瓣配置变更
        CHANGED=$(git diff --name-only HEAD~3 HEAD -- '_config.yml' 'source/_data/douban')
        echo "changed_files=$CHANGED" >> $GITHUB_OUTPUT

    - name: Cache Douban Data
      uses: actions/cache@v3
      id: cache
      with:
        path: |
          ./db.json
          ./source/_data/douban/cache
        key: ${{ runner.os }}-douban-${{ env.DOUBAN_CACHE_KEY }}

    - name: Setup Node
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: npm

    - name: Install Dependencies
      run: npm ci --omit=optional

    - name: Conditional Douban Generation
      if: |
        steps.cache.outputs.cache-hit != 'true' ||
        steps.detect.outputs.changed_files != ''
      run: |
        npx hexo douban --force
        # 生成缓存标记
        mkdir -p source/_data/douban/cache
        date +%s > source/_data/douban/cache/timestamp

    - name: Build Site
      run: |
        hexo clean
        hexo generate --bail

    - name: Deploy
      uses: peaceiris/actions-gh-pages@v3   
      with:
          deploy_key: ${{ secrets.DEPLOY_KEY }}  # 使用之前添加的私钥
          publish_dir: ./public                  # Hexo 生成的文件夹
          external_repository: MiFaZhan/MiFaZhan.github.io  # 改为你的公开仓库名
          publish_branch: blog                   # 推送到公开仓库的 main 分支
